import { mdiEyeOutline, mdiPencilOutline } from '@mdi/js'

<div class="hr-hf-wrap">
    <if(state.errorMessage)>
        <div class="notification is-danger mt-3 mb-4" id=`${input.id}_errorNotification`>
            <button class="delete" on-click("onErrorMessageClose")/>
            ${state.errorMessage}
        </div>
    </if>
    <if(state.modeChangeAllowed || state.title)>
        <div class="columns p-0 m-0 is-variable is-1 mb-4">
            <div class="column is-auto">
                <if(state.title)>
                    <span class="title is-3 has-text-weight-light is-size-4 p-0 m-0">${state.title}</span>
                </if>
            </div>
            <if(state.modeChangeAllowed)>
                <div class="is-column is-narrow pt-3">
                    <div class="field has-addons">
                        <p class="control">
                            <button on-click("onModeChange") data-mode="edit" class=`button is-rounded is-small ${state.mode === "edit" ? "is-success" : "is-light"}`>
                                <span class=`hr-hf-top-button-icon${state.mode === "edit" ? " hr-hf-top-button-active-icon" : ""}`>
                                    <svg viewBox="0 0 24 24" width="24" height="24" xmlns="http://www.w3.org/2000/svg">
                                        <path d=mdiPencilOutline/>
                                    </svg>
                                </span>
                                <span>
                                    <t>htable_mode_edit</t>
                                </span>
                            </button>
                        </p>
                        <p class="control">
                            <button on-click("onModeChange") data-mode="view" class=`button is-rounded is-small ${state.mode === "view" ? "is-success" : "is-light"}`>
                                <span class=`hr-hf-top-button-icon${state.mode === "view" ? " hr-hf-top-button-active-icon" : ""}`>
                                    <svg viewBox="0 0 24 24" width="24" height="24" xmlns="http://www.w3.org/2000/svg">
                                        <path d=mdiEyeOutline/>
                                    </svg>
                                </span>
                                <span>
                                    <t>htable_mode_view</t>
                                </span>
                            </button>
                        </p>
                    </div>
                </div>
            </if>
        </div>
    </if>
    <form on-submit("onFormSubmit") class="hr-hf-form">
        <button
            type="submit"
            style={
                display: "none"
            }/>
        <if(input.tabs)>
            <div class="columns mb-4 is-gapless is-multiline">
                <for|t| of=state.tabs>
                    $ const tab = input.tabs.find(i => i.id == t);
                    <if(tab)>
                        <button data-id=t class=`hr-hf-tab ${state.activeTab === t ? "hr-hf-tab-active" : ""}` on-click("onTabClick")>
                            ${tab.label}<if(state.tabs.length > 1)>
                                <button data-id=t on-click("onTabDeleteClick") class="delete is-small ml-2"/>
                            </if>
                        </button>
                    </if>
                </for>
                <if(input.tabs.length !== state.tabs.length)>
                    <div class=`dropdown${state.addTabDropdownActive ? " is-active" : ""}`>
                        <div class="dropdown-trigger">
                            <button class="hr-hf-tab-control" on-click("onAddTabDropdownTriggerClick")>+</button>
                        </div>
                        <div class="dropdown-menu" id=`${input.id}_dm_addTab` role="menu">
                            <div class="dropdown-content">
                                <for|t| of=input.tabs.filter(i => state.tabs.indexOf(i.id) === -1)>
                                    <a href="#" class="dropdown-item" data-id=t.id on-click("onAddTabDropdownItemClick")>${t.label}</a>
                                </for>
                            </div>
                        </div>
                    </div>
                </if>
            </div>
            $ const tab = input.tabs.find(i => i.id == state.activeTab);
            <if(tab)>
                <div class="mb-4 is-size-4 has-text-weight-light">${input.tabs.find(i => i.id == state.activeTab).label}</div>
            </if>
        </if>
        <for|a| of=input.data.getData().form>
            <div class=(a.css || "")>
                <if(a.label)>
                    <div class="hr-hf-f-area-label-wrap">
                        <div class="hr-hf-f-area-label">${a.label}</div>
                    </div>
                    <div class="hr-hf-f-area-label-dummy"/>
                </if>
                <for|i1| of=a.fields>
                    <if(Array.isArray(i1))>
                        <div class="columns pt-0 pb-0 mt-0 mb-0 is-multiline mb-0 is-variable is-2">
                            <for|i2| of=i1>
                                <div class=`column pt-0 pb-0 mt-0 mb-3 ${i2.css ? i2.css : ""}`>
                                    <if(state.mode === "edit")>
                                        <fieldEdit key=`hr_hf_f_${i2.id}_edit` formId=input.id on-button-click("onButtonClick") on-notify("onNotify") ...i2/>
                                    </if>
                                    <else>
                                        <fieldView key=`hr_hf_f_${i2.id}_view` formId=input.id on-button-click("onButtonClick") ...i2/>
                                    </else>
                                </div>
                            </for>
                        </div>
                    </if>
                    <else>
                        <if(i1.type !== "column")>
                            <div class="columns pt-0 pb-0 mt-0 mb-1 is-variable is-2">
                                <div class="column pt-0 pb-0 mt-0 mb-2">
                                    <if(state.mode === "edit")>
                                        <fieldEdit key=`hr_hf_f_${i1.id}_edit` formId=input.id on-button-click("onButtonClick") on-notify("onNotify") ...i1/>
                                    </if>
                                    <else>
                                        <fieldView key=`hr_hf_f_${i1.id}_view` formId=input.id on-button-click("onButtonClick") ...i1/> 
                                    </else>
                                </div>
                            </div>
                        </if>
                    </else>
                </for>
            </div>
        </for>
    </form>
    <if(state.loading)>
        <div class="hr-hf-loader-overlay">
            <hloading-dots/>
        </div>
    </if>
    <if(state.progress)>
        <div class="hr-hf-loader-overlay">
            <progress class="progress is-normal" value=state.progress max="100">${state.progress}%</progress>
        </div>
    </if>
</div>
<hnotify key=`notify_field_${input.formId}`/>
