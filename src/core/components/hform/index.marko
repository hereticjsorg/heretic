import { mdiEyeOutline, mdiPencilOutline, mdiHistory, mdiChevronDown } from '@mdi/js'
import { format, parseISO } from "date-fns"
import LogForm from "./data/logForm.js"

$ {
    const logFormData = new LogForm(process.browser && window.__heretic ? window.__heretic.t : out.global.t);
    component.logFormData = logFormData;
}
<div class="hr-hf-wrap">
    <if(state.errorMessage)>
        <div class=`notification is-danger mb-4 ${input.id}-errorNotification` id=`${input.id}_errorNotification`>
            <button class="delete" on-click("onErrorMessageClose")/>
            ${state.errorMessage}
        </div>
    </if>
    <if(state.modeChangeAllowed || state.title || state.historyConfig.enabled)>
        <div class="columns p-0 m-0 is-variable is-1 mb-4">
            <div class="column is-auto pt-0 pl-0">
                <if(state.title)>
                    <span class="title is-3 has-text-weight-light is-size-4 p-0 m-0">${state.title}</span>
                </if>
            </div>
            <if(state.modeChangeAllowed)>
                <div class="is-column is-narrow pt-0">
                    <div class="field has-addons">
                        <p class="control">
                            <button on-click("onModeChange") data-mode="edit" class=`button is-small ${state.mode === "edit" ? "is-success" : "is-light"}`>
                                <span class=`hr-hf-top-button-icon${state.mode === "edit" ? " hr-hf-top-button-active-icon" : ""}`>
                                    <svg viewBox="0 0 24 24" width="24" height="24" xmlns="http://www.w3.org/2000/svg">
                                        <path d=mdiPencilOutline/>
                                    </svg>
                                </span>
                                <span>
                                    <t>hform_mode_edit</t>
                                </span>
                            </button>
                        </p>
                        <p class="control">
                            <button on-click("onModeChange") data-mode="view" class=`button is-small ${state.mode === "view" ? "is-success" : "is-light"}`>
                                <span class=`hr-hf-top-button-icon${state.mode === "view" ? " hr-hf-top-button-active-icon" : ""}`>
                                    <svg viewBox="0 0 24 24" width="24" height="24" xmlns="http://www.w3.org/2000/svg">
                                        <path d=mdiEyeOutline/>
                                    </svg>
                                </span>
                                <span>
                                    <t>hform_mode_view</t>
                                </span>
                            </button>
                        </p>
                        <if(state.historyConfig.enabled)>
                            <p class="control">
                                <div class="field has-addons">
                                    <p class="control">
                                        <button on-click("onHistoryClick") class="button is-small is-light ml-1">
                                            <span class="hr-hf-top-button-icon">
                                                <svg viewBox="0 0 24 24" width="24" height="24" xmlns="http://www.w3.org/2000/svg">
                                                    <path d=mdiHistory/>
                                                </svg>
                                            </span>
                                            <span>
                                                <t>hform_history</t>
                                            </span>
                                        </button>
                                    </p>
                                </div>
                            </p>
                        </if>
                    </div>
                </div>
            </if>
        </div>
        <div class="pb-3 is-hidden-desktop"/>
    </if>
    <form on-submit("onFormSubmit") class="hr-hf-form">
        <button
            type="submit"
            style={
                display: "none"
            }/>
        <if(input.tabs)>
            <div class="columns mb-4 is-gapless is-multiline">
                <for|t| of=state.tabs>
                    $ const tab = input.tabs.find(i => i.id == t);
                    <if(tab)>
                        <button data-id=t class=`hr-hf-tab ${state.activeTab === t ? "hr-hf-tab-active" : ""}` on-click("onTabClick")>
                            ${tab.label}<if(state.tabs.length > 1)>
                                <button data-id=t on-click("onTabDeleteClick") class="delete is-small ml-2"/>
                            </if>
                        </button>
                    </if>
                </for>
                <if(input.tabs.length !== state.tabs.length)>
                    <div class=`dropdown${state.addTabDropdownActive ? " is-active" : ""}`>
                        <div class="dropdown-trigger">
                            <button class="hr-hf-tab-control" on-click("onAddTabDropdownTriggerClick")>+</button>
                        </div>
                        <div class="dropdown-menu" id=`${input.id}_dm_addTab` role="menu">
                            <div class="dropdown-content">
                                <for|t| of=input.tabs.filter(i => state.tabs.indexOf(i.id) === -1)>
                                    <a href="#" class="dropdown-item" data-id=t.id on-click("onAddTabDropdownItemClick")>${t.label}</a>
                                </for>
                            </div>
                        </div>
                    </div>
                </if>
            </div>
            $ const tab = input.tabs.find(i => i.id == state.activeTab);
            <if(tab)>
                <div class="mb-4 is-size-4 has-text-weight-light">${input.tabs.find(i => i.id == state.activeTab).label}</div>
            </if>
        </if>
        <for|a| of=input.data.getData().form>
            <div class=(a.css || "") id=(a.label ? `hr_hf_${input.id}_area_${a.id}` : null)>
                <if(a.label)>
                    <div class="hr-hf-f-area-label-wrap">
                        <div class="hr-hf-f-area-label">${a.label}</div>
                    </div>
                    <div class="hr-hf-f-area-label-dummy"/>
                </if>
                <for|i1| of=a.fields>
                    <if(Array.isArray(i1))>
                        <div class="columns pt-0 pb-0 mt-0 mb-0 is-multiline mb-0 is-variable is-2">
                            <for|i2| of=i1>
                                <div class=`column pt-0 pb-0 mt-0 mb-3 ${i2.css ? i2.css : ""}`>
                                    <if(state.mode === "edit")>
                                        <fieldEdit key=`hr_hf_f_${i2.id}_edit` formId=input.id on-button-click("onButtonClick") on-notify("onNotify") on-key-value-add-request("onKeyValueAddRequest") on-key-value-edit-request("onKeyValueEditRequest") on-key-value-delete-request("onKeyValueDeleteRequest") on-tag-add-request("onTagAddRequest") on-log-add-request("onLogAddRequest") on-log-edit-request("onLogEditRequest") on-log-delete-request("onLogDeleteRequest") parentComponent=component ...i2/>
                                    </if>
                                    <else>
                                        <fieldView key=`hr_hf_f_${i2.id}_view` formId=input.id on-button-click("onButtonClick") formData=component.input.data ...i2/>
                                    </else>
                                </div>
                            </for>
                        </div>
                    </if>
                    <else>
                        <if(i1.type !== "column")>
                            <div class="columns pt-0 pb-0 mt-0 mb-1 is-variable is-2">
                                <div class="column pt-0 pb-0 mt-0 mb-2">
                                    <if(state.mode === "edit")>
                                        <fieldEdit key=`hr_hf_f_${i1.id}_edit` formId=input.id on-button-click("onButtonClick") on-notify("onNotify") on-key-value-add-request("onKeyValueAddRequest") on-key-value-edit-request("onKeyValueEditRequest") on-key-value-delete-request("onKeyValueDeleteRequest") on-tag-add-request("onTagAddRequest") on-log-add-request("onLogAddRequest") on-log-edit-request("onLogEditRequest") on-log-delete-request("onLogDeleteRequest") parentComponent=component ...i1/>
                                    </if>
                                    <else>
                                        <fieldView key=`hr_hf_f_${i1.id}_view` formId=input.id on-button-click("onButtonClick") formData=component.input.data ...i1/> 
                                    </else>
                                </div>
                            </div>
                        </if>
                    </else>
                </for>
            </div>
        </for>
    </form>
    <if(state.loading)>
        <div class="hr-hf-loader-overlay">
            <hloading-dots/>
        </div>
    </if>
    <if(state.progress)>
        <div class="hr-hf-loader-overlay">
            <progress class="progress is-normal" value=state.progress max="100">${state.progress}%</progress>
        </div>
    </if>
</div>
<hmodal
    key=`historyModal_hf_${input.id}`
    on-button-click("onHistoryModalButtonClick")
    close=true
    title="hform_history"
    actions=[
        {
            id: "cancel",
            label: "hform_close",
            class: "button is-light",
            close: true
        }
    ]>
    <section class="modal-card-body p-0" id=`historyModal_hf_${input.id}_body`>
        <div class="p-3 pt-5">
            <if(state.historyData && state.historyData.length)>
                <for|item| of=state.historyData>
                    <div class="p-0 mb-3">
                        <div class="columns mb-1 p-0 is-gapless">
                            <div class="column is-narrow mr-2">
                                <span class="tag is-light menu-label">${item.username}</span>
                            </div>
                            <div class="column is-auto is-size-7 is-flex is-align-items-center">
                                $ const date = parseISO(item.updated);
                                <div class="mr-2">${format(date, window.__heretic.t("global.dateFormatShort"))}</div>
                                <div>${format(date, window.__heretic.t("global.timeFormatShort"))}</div>
                            </div>
                            <div class="column is-narrow">
                                <div class=`dropdown is-right${state.historyActionsDropdownOpen === item._id ? " is-active" : ""}`>
                                    <div class="dropdown-trigger">
                                        <button on-click("onHistoryActionsClick") data-id=item._id class="button is-small is-light hr-hf-history-button" data-tippy-content=(process.browser && window.__heretic ? window.__heretic.t("hform_actions") : null)>
                                            <span class="hr-hf-history-button-icon">
                                                <svg viewBox="0 0 24 24" width="24" height="24" xmlns="http://www.w3.org/2000/svg">
                                                    <path d=mdiChevronDown/>
                                                </svg>
                                            </span>
                                        </button>
                                    </div>
                                    <div class="dropdown-menu" role="menu" data-id=item._id>
                                        <div class="dropdown-content">
                                            <a href="#" class="dropdown-item" on-click("onHistoryActionRestore")>
                                                <t>hform_historyActionRestore</t>
                                            </a>
                                            <a href="#" class="dropdown-item" on-click("onHistoryActionDelete")>
                                                <t>hform_historyActionDelete</t>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="hr-hf-history-changes-wrap">
                            <if(item.changes && item.changes.length)>
                                <for|change| of=item.changes>
                                    $ const fieldData = component.fieldsFlat[change.id];
                                    <historyView fieldData=fieldData valueOld=change.valueOld valueNew=change.valueNew formData=component.input.data/>
                                </for>
                            </if>
                            <else>
                                <div>
                                    <t>hform_historyNoChanges</t>
                                </div>
                            </else>
                        </div>
                    </div>
                </for>
            </if>
            <else>
                <div class="mb-2">
                    <t>hform_noHistoryRecords</t>
                </div>
            </else>
        </div>
    </section>
    <if(state.historyData.length && state.historyPagination.length > 1)>
        <div class="p-2 hr-hf-history-pagination-wrap">
            <hpagination data=state.historyPagination currentPage=state.historyPage on-page-click("onHistoryPageClick")/>
        </div>
    </if>
</hmodal>
<hmodal
    key=`historyDeleteConfirmation_hf_${input.id}`
    on-button-click("onHistoryDeleteConfirmationButtonClick")
    close=true
    cardClass="pl-3 pr-3"
    backgroundClass="hr-hm-background-60"
    title="hform_historyDeleteConfirmation"
    actions=[
        {
            id: "delete",
            label: "hform_delete",
            class: "button is-danger"
        },
        {
            id: "cancel",
            label: "hform_cancel",
            class: "button is-light",
            close: true
        }
    ]>
    <section class="modal-card-body">
        <t>hform_historyDeleteConfirmationText</t>
    </section>
</hmodal>
<hmodal
    key=`keyValueModal_hf_${input.id}`
    on-button-click("onKeyValueModalButtonClick")
    close=true
    cardClass="pl-3 pr-3"
    backgroundClass="hr-hm-background-60"
    title="hform_keyValueModal"
    actions=[
        {
            id: "save",
            label: "hform_save",
            class: "button is-primary"
        },
        {
            id: "cancel",
            label: "hform_cancel",
            class: "button is-light",
            close: true
        }
    ]>
    <section class="modal-card-body hr-hf-settings-body" id=`hform_keyValueModal_${input.id}_body`>
        <form class="p-3" on-submit("onKeyValueModalFormSubmit")>
            <div class="field">
                <label class="label hr-hf-label">
                    <t>hform_keyValueFormOption</t>:
                </label>
                <div class="control">
                    <div class="select is-fullwidth">
                        <select on-change("onKeyValueKeyChange") id=`hform_keyValueModal_${input.id}_key`>
                            <for|item| of=state.keyValueData>
                                <option value=item.id selected=(item.id === state.keyValueSelectedKey)>${item.title}</option>
                            </for>
                        </select>
                    </div>
                </div>
                <div class="control mt-2">
                    <label class="label hr-hf-label">
                        <t>hform_keyValueFormValue</t>:
                    </label>
                    <if(state.keyValueSelectedType === "boolean")>
                        <div class="select is-fullwidth" id=`hform_keyValue_value_${input.id}`>
                            <select on-change("onKeyValueValueChange")>
                                <for|item| of=["true", "false"]>
                                    <option value=item selected=(String(item) === String(state.keyValueValue))>${item}</option>
                                </for>
                            </select>
                        </div>
                    </if>
                    <if(state.keyValueSelectedType === "text")>
                        <div id=`hform_keyValue_value_${input.id}`>
                            <input type="text" class="input" value=state.keyValueValue on-change("onKeyValueValueChange")/>
                        </div>
                    </if>
                    <if(["database", "list"].indexOf(state.keyValueSelectedType) > -1)>
                        <div class="select is-fullwidth" id=`hform_keyValue_value_${input.id}`>
                            <select on-change("onKeyValueValueChange")>
                                $ const { items } = state.keyValueData.find(i => i.id === state.keyValueSelectedKey);
                                <for|item| of=items>
                                    <option value=item.id selected=(String(item.id) === String(state.keyValueValue))>${item.label}</option>
                                </for>
                            </select>
                        </div>
                    </if>
                </div>
            </div>
        </form>
    </section>
</hmodal>
<hmodal
    key=`groupDataDeleteConfirmation_hf_${input.id}`
    on-button-click("onGroupDataDeleteConfirmationButtonClick")
    close=true
    cardClass="pl-3 pr-3"
    backgroundClass="hr-hm-background-60"
    title="hform_groupDataDeleteConfirmation"
    actions=[
        {
            id: "delete",
            label: "hform_delete",
            class: "button is-danger"
        },
        {
            id: "cancel",
            label: "hform_cancel",
            class: "button is-light",
            close: true
        }
    ]>
    <section class="modal-card-body">
        <t>hform_groupDataDeleteConfirmationText</t>
    </section>
</hmodal>
<hmodal
    key=`tagAddModal_hf_${input.id}`
    on-button-click("onTagAddModalButtonClick")
    close=true
    cardClass="pl-3 pr-3 hr-hf-tagAddModal"
    backgroundClass="hr-hm-background-60"
    title="hform_tagAddModalTitle"
    actions=[
        {
            id: "cancel",
            label: "hform_cancel",
            class: "button is-light",
            close: true
        }
    ]>
    <section class="hr-hf-tags-filter-wrap">
        <input id=`tagAddModal_filter_${input.id}` class="input hr-hf-tags-filter" type="text" placeholder=window.__heretic.t("hform_tagsFilter") on-keyup("onTagsFilterKeyup") value=state.tagsFilter/>
    </section>
    <section class="modal-card-body p-0">
        <div class="menu">
            <ul class="menu-list">
                <if(state.tagsData && state.tagsData.data.length)>
                    <for|item| of=state.tagsData.data>
                        <li on-click("onTagClick")>
                            <a data-id=item.id>${item.label}</a>
                        </li>
                    </for>
                </if>
            </ul>
        </div>
    </section>
</hmodal>
<hmodal
    key=`logModal_hf_${input.id}`
    on-button-click("onLogModalButtonClick")
    close=true
    title="hform_logModal"
    actions=[
        {
            id: "save",
            label: "hform_save",
            class: "button is-primary"
        },
        {
            id: "cancel",
            label: "hform_cancel",
            class: "button is-light",
            close: true
        }
    ]>
    <section class="modal-card-body hr-hf-settings-body">
        <hform key=`logForm_${input.id}` id=`logForm_${input.id}` data=logFormData on-form-submit("onLogFormSubmit")/>
    </section>
</hmodal>
<hmodal
    key=`logItemDeleteConfirmation_hf_${input.id}`
    on-button-click("onLogItemDeleteConfirmationButtonClick")
    close=true
    cardClass="pl-3 pr-3"
    backgroundClass="hr-hm-background-60"
    title="hform_logItemDeleteConfirmation"
    actions=[
        {
            id: "delete",
            label: "hform_delete",
            class: "button is-danger"
        },
        {
            id: "cancel",
            label: "hform_cancel",
            class: "button is-light",
            close: true
        }
    ]>
    <section class="modal-card-body">
        <t>hform_lotItemDeleteConfirmationText</t>
    </section>
</hmodal>
<hnotify key=`notify_field_${input.id}`/>
