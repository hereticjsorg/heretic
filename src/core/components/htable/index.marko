import { mdiReload, mdiMagnify, mdiCogOutline, mdiDrag, mdiPencilOutline, mdiTrashCanOutline, mdiInformation } from "@mdi/js"
import SettingsPagesForm from "./settingsPagesForm"

<div class="columns is-gapless m-0 p-0">
    <div class="column is-auto">
        <if(state.topButtons)>
            <div class="mb-3">
                <for|item, index| of=state.topButtons>
                    <button
                        data-id=item.id
                        on-click("onTopButtonClick")
                        class=`button ${item.danger ? "is-danger" : "is-light"}`
                        style={
                            "margin-left": index > 0 ? "4px" : "0"
                        }>
                        <span class=`hr-ht-top-button-icon icon${item.danger ? " hr-ht-top-button-icon-danger" : ""}`>
                            <svg viewBox="0 0 24 24" width="24" height="24" xmlns="http://www.w3.org/2000/svg">
                                <path d=item.icon/>
                            </svg>
                        </span>
                        <span>${item.label}</span>
                    </button>
                </for>
                <if(state.loadConfig && state.loadConfig.url)>
                    <button
                        on-click("onReloadClick")
                        class="button is-light"
                        style={
                            "margin-left": state.topButtons.length > 0 ? "4px" : "0"
                        }>
                        <span class="hr-ht-top-button-icon icon">
                            <svg viewBox="0 0 24 24" width="24" height="24" xmlns="http://www.w3.org/2000/svg">
                                <path d=mdiReload/>
                            </svg>
                        </span>
                        <t>htable_reloadButton</t>
                    </button>
                </if>
                <button
                    on-click("onSettingsClick")
                    class="button is-light"
                    style={
                        "margin-left": state.topButtons.length > 0 ? "4px" : "0"
                    }>
                    <span class="hr-ht-top-button-icon icon">
                        <svg viewBox="0 0 24 24" width="24" height="24" xmlns="http://www.w3.org/2000/svg">
                            <path d=mdiCogOutline/>
                        </svg>
                    </span>
                    <t>htable_settingsButton</t>
                    <if(state.filters.length)>
                        <span class="hr-ht-top-info-icon icon">
                            <svg viewBox="0 0 24 24" width="24" height="24" xmlns="http://www.w3.org/2000/svg">
                                <path d=mdiInformation/>
                            </svg>
                        </span>
                    </if>
                </button>
            </div>
        </if>
    </div>
    <div class="column is-narrow">
        <div class="control has-icons-right">
            <input class="input" type="text" value=state.searchText on-input("onSearchInputChange")/>
            <span class="icon is-small is-right">
                <span class="hr-ht-form-icon icon">
                    <svg viewBox="0 0 24 24" width="24" height="24" xmlns="http://www.w3.org/2000/svg">
                        <path d=mdiMagnify/>
                    </svg>
                </span>
            </span>
        </div>
    </div>
</div>
<div
    no-update
    class="hr-ht-scroll-wrapper"
    id=`hr_ht_table_scroll_wrapper_${input.id}`
    style={
        display: "none"
    }>
    <div class="hr-ht-scroll" id=`hr_ht_table_scroll_${input.id}`/>
</div>
<div class="hr-ht-wrap" id=`hr_ht_wrap_${input.id}`>
    <div class="table-container hr-ht-table-container" id=`hr_ht_table_container_${input.id}`>
        <table id=`hr_ht_table_${input.id}` class="hr-ht-table table is-bordered is-striped is-hoverable is-fullwidth" on-mousemove("onColumnMove")>
            <thead class="hr-ht-thead">
                <tr class="hr-ht-thead-tr">
                    <if(state.checkboxColumn)>
                        <th class="hr-ht-th p-0 m-0 is-narrow">
                            <div class="p-2">
                                <input type="checkbox" checked=state.checkboxesAll class="hr-ht-checkbox-top" on-click("onCheckboxSelectAllClick")/>
                            </div>
                        </th>
                    </if>
                    <if(Object.keys(state.columns).length)>
                        <for|k, index| of=Object.keys(state.columns)>
                            <if(state.columns[k])>
                                $ const item = state.columnData[k];
                                <th
                                    data-id=item.id
                                    on-click("onColumnThClick")
                                    class="hr-ht-th p-0 m-0"
                                    id=`hr_ht_column_${item.id}`
                                    style={
                                        cursor: item.sortable ? "pointer" : "inherit"
                                    }>
                                    <div class="columns is-gapless m-0 p-0">
                                        <if(index > 0 && (!state.actionColumn || index < component.getLastVisibleColumnIndex()))>
                                            <div class="column is-narrow">
                                                <div class="hr-ht-thead-move" id=`hr_ht_mover_${item.id}` data-id=item.id on-mousedown("onColumnMouseDown")/>
                                            </div>
                                        </if>
                                        <div class="column is-auto">
                                            <div class="p-2 hr-ht-thead-label">
                                                ${item.label}<if(state.sortField === item.id)>
                                                    <icon-arrow direction=(state.sortDirection === "asc" ? "down" : "up")/>
                                                </if>
                                            </div>
                                        </div>
                                    </div>
                                </th>
                            </if>
                        </for>
                    </if>
                    <else>
                        <th class="hr-ht-th p-0 m-0">
                            <div class="columns is-gapless m-0 p-0">
                                <div class="column is-auto">
                                    <div class="p-2 hr-ht-thead-label">&nbsp;</div>
                                </div>
                            </div>
                        </th>
                    </else>
                    <if(state.actionColumn)>
                        <th class="hr-ht-th p-0 m-0 is-narrow" id=`hr_ht_th_actions_${input.id}`>
                            <div class="columns is-gapless m-0 p-0" id=`hr_ht_th_actions_columns_${input.id}`>
                                <div class="column is-auto" id=`hr_ht_header_actions_${input.id}`>
                                    <div class="p-2 hr-ht-thead-label hr-ht-thead-actions">
                                        <t>htable_actions</t>
                                    </div>
                                </div>
                            </div>
                        </th>
                    </if>
                </tr>
            </thead>
            <tbody>
                <if(state.data && state.data.length)>
                    <for|row, ix| of=state.data>
                        <tr class="hr-ht-tr">
                            <if(state.checkboxColumn)>
                                <td class="hr-ht-td p-0 m-0">
                                    <div class="hr-ht-checkbox-wrap">
                                        <input type="checkbox" data-id=row._id on-click("onCheckboxClick") checked=(state.checkboxes.indexOf(row._id) > -1)/>
                                    </div>
                                </td>
                            </if>
                            <for|k| of=Object.keys(state.columns)>
                                <if(state.columns[k])>
                                    $ const item = state.columnData[k];
                                    <td class="hr-ht-td p-0 m-0">
                                        <div class="p-2 hr-ht-table-cell">${input.formData.processTableCell(k, row)}</div>
                                    </td>
                                </if>
                            </for>
                            <if(state.actionColumn)>
                                <td class=`hr-ht-td is-narrow p-0 m-0 hr-ht-action-cell-wrap hr-ht-action-cell-wrap-${input.id}` id=`hr_ht_action_cell_wrap_${input.id}_${ix}` data-index=ix/>
                            </if>
                        </tr>
                    </for>
                </if>
                <else>
                    <tr class="hr-ht-tr">
                        <td class="hr-ht-td p-0 m-0" colspan=((Object.keys(state.columns).length || 1) + (state.checkboxColumn ? 1 : 0))>
                            <div class="p-2">
                                <if(!state.loading)>
                                    <t>htable_noRecords</t>
                                </if>
                            </div>
                        </td>
                        <if(state.actionColumn)>
                            <td class=`hr-ht-td is-narrow p-0 m-0 hr-ht-action-cell-wrap hr-ht-action-cell-wrap-${input.id}` id=`hr_ht_action_cell_wrap_${input.id}_0` data-index=0/>
                        </if>
                    </tr>
                </else>
            </tbody>
        </table>
    </div>
    <div class="hr-ht-table-controls" id=`hr_ht_table_controls_${input.id}`>
        <if(state.data && state.data.length)>
            <for|row, ix| of=state.data>
                <div
                    class=`hr-ht-action-cell hr-ht-action-cell-${input.id} p-2 m-0 ${ix % 2 === 0 ? "hr-ht-action-cell-even" : "hr-ht-action-cell-odd"}`
                    data-index=ix
                    id=`hr_ht_action_cell_${input.id}_${ix}`
                    style={
                        opacity: 0
                    }>
                    <div class="field is-grouped hr-ht-action-cell-buttons">
                        <for|item, index| of=state.actions>
                            <button
                                data-id=item.id
                                data-item=row._id
                                on-click("onActionButtonClick")
                                class=`button is-small hr-ht-action-button ${item.danger ? "is-danger" : "is-light"}`
                                style={
                                    "margin-left": index > 0 ? "2px" : "0"
                                }>
                                <span class=`hr-ht-action-icon icon${item.danger ? " hr-ht-action-icon-danger" : ""}`>
                                    <svg viewBox="0 0 24 24" width="24" height="24" xmlns="http://www.w3.org/2000/svg">
                                        <path d=item.icon/>
                                    </svg>
                                </span>
                            </button>
                        </for>
                    </div>
                </div>
            </for>
        </if>
        <else>
            <div class=`hr-ht-action-cell hr-ht-action-cell-${input.id} p-2 m-0 hr-ht-action-cell-even` data-index=0 id=`hr_ht_action_cell_${input.id}_0`>&ndash;</div>
        </else>
        <div class=`hr-ht-td p-2 m-0 hr-ht-action-cell-control` id=`hr_ht_action_cell_control_${input.id}`>
            <t>htable_actions</t>
        </div>
    </div>
    <if(state.loading)>
        <div class="hr-ht-loading-wrap" id=`hr_ht_loading_wrap_${input.id}` no-update>
            <div class="hr-ht-loading" id=`hr_ht_loading_${input.id}`>
                <hloading-dots/>
            </div>
        </div>
    </if>
</div>
<hpagination data=state.pagination currentPage=state.currentPage on-page-click("onPageClick")/>
<div
    id=`hr_ht_dummy_${input.id}`
    style={
        display: "none"
    }
    class="hr-ht-dummy"/>
<hnotify key=`notify_ht_${input.id}`/>
<hmodal
    key=`deleteConfirmation_ht_${input.id}`
    on-button-click("onDeleteConfirmationButtonClick")
    close=true
    title="htable_deleteConfirmation"
    actions=[
        {
            id: "delete",
            label: "htable_delete",
            class: "button is-danger"
        },
        {
            id: "cancel",
            label: "htable_cancel",
            class: "button is-light",
            close: true
        }
    ]>
    <section class="modal-card-body">
        <t>htable_deleteItems</t>:
        <ul class="mt-2">
            <for|item| of=state.deleteItems>
                <li>&ndash;&nbsp;${item.title}</li>
            </for>
        </ul>
    </section>
</hmodal>
<hmodal
    key=`settingsModal_ht_${input.id}`
    on-button-click("onSettingsButtonClick")
    close=true
    title="htable_settings"
    actions=[
        {
            id: "save",
            label: "htable_save",
            class: "button is-primary"
        },
        {
            id: "cancel",
            label: "htable_cancel",
            class: "button is-light",
            close: true
        }
    ]>
    <header class="modal-card-head hr-ht-settings-tabs-wrap p-0">
        <div class="tabs is-boxed hr-hr-settings-tabs p-0">
            <ul>
                <for|i| of=["columns", "pages", "filter"]>
                    <li class=(state.settingsTab === i ? "is-active" : "")>
                        <a on-click("onSettingsTabClick") data-tab=i>
                            <if(i === "columns")>
                                <t>htable_settingsColumns</t>
                            </if>
                            <if(i === "pages")>
                                <t>htable_settingsPages</t>
                            </if>
                            <if(i === "filter")>
                                <t>htable_settingsFilter</t>
                                <if(state.filters.length)>
                                    <span class="hr-ht-top-info-icon icon">
                                        <svg viewBox="0 0 24 24" width="24" height="24" xmlns="http://www.w3.org/2000/svg">
                                            <path d=mdiInformation/>
                                        </svg>
                                    </span>
                                </if>
                            </if>
                        </a>
                    </li>
                </for>
            </ul>
        </div>
    </header>
    <section class="modal-card-body hr-ht-settings-body">
        <div class="p-3">
            <div style={
                position: state.settingsTab === "columns" ? "unset" : "absolute",
                left: state.settingsTab === "columns" ? "unset" : "-999999px",
                clip: state.settingsTab === "columns" ? "unset" : "rect(0 0 0 0)"
            }>
                <for|k, index| of=Object.keys(state.settingsColumns)>
                    $ const column = state.columnData[k];
                    <if(index > 0 && state.settingColumnDrag !== null)>
                        <div data-id=k class="hr-ht-settings-columns-drop-area" on-dragover("onSettingsColumnDragOver") on-dragenter("onSettingsColumnDragEnter") on-dragleave("onSettingsColumnDragLeave") on-drop("onSettingsColumnDrop")/>
                    </if>
                    <div class="hr-ht-settings-columns-row columns is-vcentered is-mobile is-gapless p-1 m-0" draggable="true" on-dragstart("onSettingsColumnDragStart") on-dragend("onSettingsColumnDragEnd") data-id=k>
                        <div class="column is-narrow mr-2">
                            <span class="hr-ht-drag-icon icon">
                                <svg viewBox="0 0 24 24" width="24" height="24" xmlns="http://www.w3.org/2000/svg">
                                    <path d=mdiDrag/>
                                </svg>
                            </span>
                        </div>
                        <div class="column is-narrow mr-2">
                            <input type="checkbox" class="hr-hr-settings-switch switch" checked=state.settingsColumns[k] on-change("onSettingsColumnCheckboxClick") data-id=k/>
                        </div>
                        <div class="column is-auto mr-2">${column.label}</div>
                        <div class="column is-narrow mr-2">
                            <button class="button is-small hr-ht-action-button is-light" data-id=column.id on-click("onSettingsColumnUpClick") disabled=(index === 0)>
                                <span class="hr-ht-settings-icon icon">
                                    <svg viewBox="0 0 24 24" width="24" height="24" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M7,15L12,10L17,15H7Z"/>
                                    </svg>
                                </span>
                            </button>
                        </div>
                        <div class="column is-narrow">
                            <button class="button is-small hr-ht-action-button is-light" data-id=column.id on-click("onSettingsColumnDownClick") disabled=(index === Object.keys(state.settingsColumns).length - 1)>
                                <span class="hr-ht-settings-icon icon">
                                    <svg viewBox="0 0 24 24" width="24" height="24" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M7,10L12,15L17,10H7Z"/>
                                    </svg>
                                </span>
                            </button>
                        </div>
                    </div>
                </for>
            </div>
            <div style={
                position: state.settingsTab === "pages" ? "unset" : "absolute",
                left: state.settingsTab === "pages" ? "unset" : "-999999px",
                clip: state.settingsTab === "pages" ? "unset" : "rect(0 0 0 0)"
            }>
                <hform key=`settingsPagesForm_${input.id}` id=`settingsPagesForm_${input.id}` data=(new SettingsPagesForm(process.browser && window.__heretic ? window.__heretic.t : out.global.t)) on-form-submit("onSettingsPagesFormSubmit")/>
            </div>
            <div style={
                position: state.settingsTab === "filter" ? "unset" : "absolute",
                left: state.settingsTab === "filter" ? "unset" : "-999999px",
                clip: state.settingsTab === "filter" ? "unset" : "rect(0 0 0 0)"
            }>
                <div class="buttons mb-0">
                    <button class="button is-light is-small" on-click("settingsNewFilter")>
                        <t>htable_filterNew</t>
                    </button>
                </div>
                <if(state.settingsFilters.length)>
                    <for|item| of=state.settingsFilters>
                        <div class="hr-ht-settings-filters-row columns is-vcentered is-mobile is-gapless p-1 m-0" data-id=item.id>
                            <div class="column is-auto">
                                ${state.columnData[item.id].label} &nbsp;
                                <span class="tag is-dark mr-2">${window.__heretic.t(item.mode)}</span>
                                <if(Array.isArray(item.value))>
                                    <for|ai| of=item.value>
                                        <span class="tag is-info">${state.columnData[item.id].options.find(i => i.value === ai).label}</span> 
                                    </for>
                                </if>
                                <else>${item.value}</else>
                            </div>
                            <div class="column is-narrow">
                                <button class="mr-1 button is-small hr-ht-action-button is-light" on-click("onSettingsFilterEditClick")>
                                    <span class="hr-ht-settings-icon icon">
                                        <svg viewBox="0 0 24 24" width="24" height="24" xmlns="http://www.w3.org/2000/svg">
                                            <path d=mdiPencilOutline/>
                                        </svg>
                                    </span>
                                </button>
                                <button class="button is-small hr-ht-action-button is-danger" on-click("onSettingsFilterDeleteClick")>
                                    <span class="hr-ht-settings-icon hr-ht-action-icon-danger icon">
                                        <svg viewBox="0 0 24 24" width="24" height="24" xmlns="http://www.w3.org/2000/svg">
                                            <path d=mdiTrashCanOutline/>
                                        </svg>
                                    </span>
                                </button> 
                            </div>
                        </div>
                    </for>
                </if>
            </div>
        </div>
    </section>
</hmodal>
<hmodal
    key=`filterModal_ht_${input.id}`
    on-button-click("onFilterButtonClick")
    close=true
    cardClass="pl-3 pr-3"
    backgroundClass="hr-hm-background-60"
    title="htable_filterEdit"
    actions=[
        {
            id: "save",
            label: "htable_save",
            class: "button is-primary"
        },
        {
            id: "cancel",
            label: "htable_cancel",
            class: "button is-light",
            close: true
        }
    ]>
    <section class="modal-card-body hr-ht-settings-body p-3" id=`filterModal_ht_${input.id}_body`>
        <form on-submit("onFilterEditFormSubmit")>
            <button
                type="submit"
                style={
                    display: "none"
                }/>
            <div class="select is-fullwidth">
                <select on-change("onSettingsFilterEditSelectedChange") id=`filterModal_ht_${input.id}_select_id`>
                    <for|item| of=Object.keys(state.columnData)>
                        <if(["text", "select"].indexOf(state.columnData[item].type) > -1)>
                            <option value=item selected=(state.settingsFilterEditSelectedId === item)>${state.columnData[item].label}</option>
                        </if>
                    </for>
                </select>
            </div>
            <div class="select mt-2 is-fullwidth">
                <select on-change("onSettingsFilterEditModeChange")>
                    <for|item| of=state.settingsFilterEditSelectedModes>
                        <option value=item selected=(state.settingsFilterEditSelectedMode === item)>${window.__heretic.t(item)}</option>
                    </for>
                </select>
            </div>
            <if(state.columnData[state.settingsFilterEditSelectedId])>
                <if(state.columnData[state.settingsFilterEditSelectedId].type === "text")>
                    <div class="mt-2 is-fullwidth">
                        <input class="input" type="text" value=state.settingsFilterEditSelectedValue on-change("onSettingsFilterEditValueChange")/>
                    </div>
                </if>
                <if(state.columnData[state.settingsFilterEditSelectedId].type === "select")>
                    <div class="mt-2">
                        <hselect key=`filterModal_ht_${input.id}_hselect`/>
                    </div>
                </if>
            </if>
        </form>
    </section>
</hmodal>
